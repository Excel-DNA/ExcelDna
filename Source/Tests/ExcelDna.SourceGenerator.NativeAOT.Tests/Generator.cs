namespace ExcelDna.SourceGenerator.NativeAOT.Tests
{
    public class Generator
    {
        [Fact]
        public void Empty()
        {
            VerifyFunctions("", """
                List<Type> typeRefs = new List<Type>();
                List<MethodInfo> methodRefs = new List<MethodInfo>();
                """);
        }

        [Fact]
        public void Params()
        {
            VerifyFunctions("""
                using ExcelDna.Integration;

                namespace ExcelDna.AddIn.RuntimeTestsAOT
                {
                    public class Functions
                    {
                        [ExcelFunction]
                        public static string NativeParamsJoinString(string separator, params string[] values)
                        {
                            return string.Join(separator, values);
                        }
                    }
                }
                """, """
                List<Type> typeRefs = new List<Type>();
                ExcelDna.Integration.NativeAOT.MethodsForRegistration.Add(typeof(ExcelDna.AddIn.RuntimeTestsAOT.Functions).GetMethod("NativeParamsJoinString")!);
                typeRefs.Add(typeof(Func<string, string[], string>));
                typeRefs.Add(typeof(Func<object, string>));
                typeRefs.Add(typeof(Func<object, string[]>));
                
                List<MethodInfo> methodRefs = new List<MethodInfo>();
                methodRefs.Add(typeof(List<string>).GetMethod("ToArray")!);
                """);
        }

        private static void VerifyFunctions(string sourceCode, string functions)
        {
            string template = """
        // <auto-generated/>
        using System;
        using System.Collections.Generic;
        using System.Reflection;
        using System.Runtime.CompilerServices;
        using System.Runtime.InteropServices;
        
        namespace ExcelDna.SourceGenerator.NativeAOT
        {
            public unsafe class AddInInitialize
            {
                [UnmanagedCallersOnly(EntryPoint = "Initialize", CallConvs = new[] { typeof(CallConvCdecl) })]
                public static short Initialize(void* xlAddInExportInfoAddress, void* hModuleXll, void* pPathXLL, byte disableAssemblyContextUnload, void* pTempDirPath)
                {
                    ExcelDna.Integration.NativeAOT.IsActive = true;
        
                    
        
        [FUNCTIONS]
        
        
                    return ExcelDna.ManagedHost.AddInInitialize.InitializeNativeAOT(xlAddInExportInfoAddress, hModuleXll, pPathXLL, disableAssemblyContextUnload, pTempDirPath);
                }
            }
        }
        """;
            SourceGeneratorDriver.Verify(sourceCode, template.Replace("[FUNCTIONS]", functions));
        }
    }
}
